using System;
using System.Collections.Generic;
using System.IO;
using System.IO.Compression;

class Program
{
    static void Main()
    {
        // Read the config file
        string configFilePath = "config.txt"; // Specify the path to your config file
        List<string> directoryPaths = ReadConfigFile(configFilePath);

        // Iterate through each directory path
        foreach (string directoryPath in directoryPaths)
        {
            // List all files in the directory and its subfolders
            List<string> fileNames = ListAllFiles(directoryPath);

            // Display the file names
            Console.WriteLine($"Files in directory '{directoryPath}':");
            foreach (string fileName in fileNames)
            {
                // Check if the file name matches the specified format
                if (IsFileNameInFormat(fileName))
                {
                    // Extract the date and time from the file name
                    string dateTimeString = ExtractDateTimeFromFileName(fileName);

                    // Convert the extracted date and time to a standard DateTime format
                    if (DateTime.TryParseExact(dateTimeString, "yyyyMMdd_HHmmss", null, System.Globalization.DateTimeStyles.None, out DateTime dateTime))
                    {
                        // Print the file name with the formatted date and time
                        Console.WriteLine($"{fileName} - {dateTime.ToString("yyyy-MM-dd HH:mm:ss")}");
                    }
                }
                else
                {
                    Console.WriteLine(fileName);
                }
            }
            Console.WriteLine();
        }

        Console.WriteLine("Press any key to exit.");
        Console.ReadKey();
    }

    // Read the config file and return a list of directory paths
    static List<string> ReadConfigFile(string filePath)
    {
        List<string> directoryPaths = new List<string>();

        try
        {
            string[] lines = File.ReadAllLines(filePath);

            foreach (string line in lines)
            {
                // Skip empty lines or lines starting with a comment character (e.g., '#')
                if (string.IsNullOrWhiteSpace(line) || line.Trim().StartsWith("#"))
                    continue;

                // Add the directory path to the list
                directoryPaths.Add(line.Trim());
            }
        }
        catch (IOException ex)
        {
            Console.WriteLine($"Error reading config file: {ex.Message}");
        }

        return directoryPaths;
    }

    // Recursively list all files in a directory and its subfolders, including files inside zip files
    static List<string> ListAllFiles(string directoryPath)
    {
        List<string> fileNames = new List<string>();

        try
        {
            // Get all files in the current directory
            string[] files = Directory.GetFiles(directoryPath);
            foreach (string file in files)
            {
                fileNames.Add(file);
            }

            // Recursively process subdirectories
            string[] subDirectories = Directory.GetDirectories(directoryPath);
            foreach (string subDirectory in subDirectories)
            {
                List<string> subDirectoryFiles = ListAllFiles(subDirectory);
                fileNames.AddRange(subDirectoryFiles);
            }

            // Get all zip files in the current directory
            string[] zipFiles = Directory.GetFiles(directoryPath, "*.zip");
            foreach (string zipFile in zipFiles)
            {
                List<string> zipFileEntries = ListFilesInZip(zipFile);
                foreach (string entry in zipFileEntries)
                {
                    fileNames.Add(Path.Combine(zipFile, entry));
                }
            }
        }
        catch (IOException ex)
        {
            Console.WriteLine($"Error listing files: {ex.Message}");
        }

        return fileNames;
    }

    // Extract and return the file names from a zip file
    static List<string> ListFilesInZip(string zipFilePath)
    {
        List<string> fileNames = new List<string>();

        try
        {
            using (ZipArchive archive = ZipFile.OpenRead(zipFilePath))
            {
                foreach (ZipArchiveEntry entry in archive.Entries)
                {
                    fileNames.Add(entry.FullName);
                }
            }
        }
        catch (IOException ex)
        {
            Console.WriteLine($"Error reading zip file: {ex.Message}");
        }

        return fileNames;
    }

    // Check if the file name is in the specified format (six digits underscore six digits)
    static bool IsFileNameInFormat(string fileName)
    {
        return System.Text.RegularExpressions.Regex.IsMatch(fileName, @"\d{6}_\d{6}");
    }

    // Extract and return the date and time from the file name
    static string ExtractDateTimeFromFileName(string fileName)
    {
        int startIndex = fileName.IndexOf("_") + 1;
        int endIndex = fileName.LastIndexOf(".");
        return fileName.Substring(startIndex, endIndex - startIndex);
    }
}
