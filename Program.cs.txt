using System;
using System.Collections.Generic;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Text.RegularExpressions;

class Program
{
    static void Main()
    {
        // Read the config file
        string configFilePath = "config.txt"; // Specify the path to your config file
        List<string> directoryPaths = ReadConfigFile(configFilePath);

        // Get the user input string
        Console.Write("Enter a date-time string (format: yyyyMMdd_HHmmss): ");
        string userInput = Console.ReadLine();

        // Convert user input string to DateTime
        DateTime userInputDateTime = ConvertToDateTime(userInput);
        Console.WriteLine($"User input: {userInputDateTime}");

        // Iterate through each directory path
        foreach (string directoryPath in directoryPaths)
        {
            // List all files in the directory and its subfolders
            List<string> fileNames = ListAllFiles(directoryPath);

            // Display the file names, StartTime, and EndTime
            Console.WriteLine($"Files in directory '{directoryPath}':");
            foreach (string fileName in fileNames)
            {
                DateTime startTime = DateTime.MinValue;
                DateTime endTime = DateTime.MinValue;

                string dateTimeString = ExtractDateTimeFromFileName(Path.GetFileName(fileName));
                if (!string.IsNullOrEmpty(dateTimeString))
                {
                    startTime = ConvertToDateTime(dateTimeString);
                }

                if (IsZipFile(fileName))
                {
                    List<string> zipFileEntries = ListFilesInZip(fileName);
                    foreach (string entry in zipFileEntries)
                    {
                        string entryFileName = Path.GetFileName(entry);
                        DateTime entryStartTime = ExtractStartTimeFromEntryFileName(entryFileName);
                        DateTime entryEndTime = GetLastWriteTimeInZipFile(fileName, entry);

                        // Print the file name, StartTime, and EndTime
                        Console.WriteLine($"{entryFileName} - StartTime: {entryStartTime}, EndTime: {entryEndTime} - IsInRange: {IsDateTimeInRange(userInputDateTime, entryStartTime, entryEndTime)}");
                    }
                }
                else
                {
                    endTime = File.GetLastWriteTime(fileName);

                    // Print the file name, StartTime, and EndTime
                    Console.WriteLine($"{fileName} - StartTime: {startTime}, EndTime: {endTime} - IsInRange: {IsDateTimeInRange(userInputDateTime, startTime, endTime)}");
                }
            }

            Console.WriteLine();
        }

        Console.WriteLine("Press any key to exit.");
        Console.ReadKey();
    }

    // Read the config file and return a list of directory paths
    static List<string> ReadConfigFile(string filePath)
    {
        List<string> directoryPaths = new List<string>();

        try
        {
            string[] lines = File.ReadAllLines(filePath);

            foreach (string line in lines)
            {
                // Skip empty lines or lines starting with a comment character (e.g., '#')
                if (string.IsNullOrWhiteSpace(line) || line.Trim().StartsWith("#"))
                    continue;

                // Add the directory path to the list
                directoryPaths.Add(line.Trim());
            }
        }
        catch (IOException ex)
        {
            Console.WriteLine($"Error reading config file: {ex.Message}");
        }

        return directoryPaths;
    }

    // Recursively list all files in a directory and its subfolders, including files inside zip files
    static List<string> ListAllFiles(string directoryPath)
    {
        List<string> fileNames = new List<string>();

        try
        {
            // Get all files in the current directory
            string[] files = Directory.GetFiles(directoryPath);
            foreach (string file in files)
            {
                fileNames.Add(file);
            }

            // Recursively process subdirectories
            string[] subDirectories = Directory.GetDirectories(directoryPath);
            foreach (string subDirectory in subDirectories)
            {
                List<string> subDirectoryFiles = ListAllFiles(subDirectory);
                fileNames.AddRange(subDirectoryFiles);
            }
        }
        catch (IOException ex)
        {
            Console.WriteLine($"Error listing files: {ex.Message}");
        }

        return fileNames;
    }

    // Extract and return the file names from a zip file
    static List<string> ListFilesInZip(string zipFilePath)
    {
        List<string> fileNames = new List<string>();

        try
        {
            using (ZipArchive archive = ZipFile.OpenRead(zipFilePath))
            {
                foreach (ZipArchiveEntry entry in archive.Entries)
                {
                    fileNames.Add(entry.FullName);
                }
            }
        }
        catch (IOException ex)
        {
            Console.WriteLine($"Error reading zip file: {ex.Message}");
        }

        return fileNames;
    }

    // Extract and return the date and time from the file name
    static string ExtractDateTimeFromFileName(string fileName)
    {
        string pattern = @"\d{8}_\d{6}";
        Match match = Regex.Match(fileName, pattern);
        if (match.Success)
        {
            return match.Value;
        }

        return string.Empty;
    }

    // Convert the extracted date and time to a DateTime object
    static DateTime ConvertToDateTime(string dateTimeString)
    {
        if (DateTime.TryParseExact(dateTimeString, "yyyyMMdd_HHmmss", null, System.Globalization.DateTimeStyles.None, out DateTime dateTime))
        {
            return dateTime;
        }

        return DateTime.MinValue;
    }

    // Check if a file is a zip file
    static bool IsZipFile(string fileName)
    {
        return string.Equals(Path.GetExtension(fileName), ".zip", StringComparison.OrdinalIgnoreCase);
    }

    // Extract the StartTime from the entry file name
    static DateTime ExtractStartTimeFromEntryFileName(string entryFileName)
    {
        string dateTimeString = ExtractDateTimeFromFileName(entryFileName);
        if (!string.IsNullOrEmpty(dateTimeString))
        {
            return ConvertToDateTime(dateTimeString);
        }

        return DateTime.MinValue;
    }

    // Get the last write time inside files in the compressed file of a zip file
    static DateTime GetLastWriteTimeInZipFile(string zipFilePath, string entryFileName)
    {
        try
        {
            using (ZipArchive archive = ZipFile.OpenRead(zipFilePath))
            {
                foreach (ZipArchiveEntry entry in archive.Entries)
                {
                    if (string.Equals(entry.FullName, entryFileName, StringComparison.OrdinalIgnoreCase))
                    {
                        return entry.LastWriteTime.LocalDateTime;
                    }
                }
            }
        }
        catch (IOException ex)
        {
            Console.WriteLine($"Error reading zip file: {ex.Message}");
        }

        return DateTime.MinValue;
    }

    // Check if a DateTime is within the range of StartTime and EndTime
    static bool IsDateTimeInRange(DateTime dateTime, DateTime startTime, DateTime endTime)
    {
        return dateTime >= startTime && dateTime <= endTime;
    }
}
